# Multi-stage build for ARM platforms (Raspberry Pi)
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production && \
    npm install -g typescript

# Copy source code
COPY src ./src
COPY shared ../shared

# Build TypeScript
RUN tsc

# Production stage - optimized for ARM
FROM node:18-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    jq \
    tzdata \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy built application
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package*.json ./

# Copy shared modules
COPY shared ./shared

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "process.exit(0)" || exit 1

# Use less memory for Node.js on Raspberry Pi
ENV NODE_OPTIONS="--max-old-space-size=256"

# Run as non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001
USER nodejs

# Start the worker
CMD ["node", "dist/index.js"]
